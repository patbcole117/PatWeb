
Host Configuration
     On the Ubuntu server is a docker-compose.yaml file to spool up two containers
     on their own docker-network. 
     
          NGINX
               NGINX acts as a reverse proxy to decouple SSL/TLS management from
               my python application. It also allows me to potentially add multiple
               servers behind one port if I later choose to do so.
               
          patweb
               patweb is the name of my website project. It uses Python's Flask 
               framework and Gunicorn to serve my website. 
               
     In addition there is a stand alone docker container for certbot to generate
     SSL/TLS certificates.
     
     There is also a script to quickly update my server. The script does 4 
     things:
     
     1. Deletes the old patweb files.
     2. Clones the git repo for patweb.
     3. Remakes the docker image.
     4. Restarts the web server container.
     
     This allows me to make changes to the website and deploy them in seconds.
     Containers are truly amazing!

Efficiency
     During the creation of this website, I tried to use as few lines of code as
     possible. If there are blocks in different HTML files that need the same 
     styling, they import the same CSS; If something is repeated, loops are used
     to generate the HTML.

     For example the "projects" page is actually very lean. See below:

          ...
          <code>
            <b>&lcub;&percnt; for p in project_list &percnt;&rcub;</b>
            &lt;div class="project"&gt;
                &lt;div class="project-title"&gt;<b>&lcub;&lcub;p['title']&rcub;&rcub;</b>&lt;/div&gt;
                &lt;div class="project-infobox"&gt;
                    &lt;div class="project-links"&gt;
                        <b>&lcub;&percnt; for l in p['links'] &percnt;&rcub;</b>
                            &lt;a href="<b>&lcub;&lcub;l['url']&rcub;&rcub;</b>"&gt;<b>&lcub;&lcub;l['title']&rcub;&rcub;</b>&lt;/a&gt;
                        <b>&lcub;&percnt; endfor &percnt;&rcub;</b>
                    &lt;/div&gt;
                    &lt;div class="project-desc"&gt;
                        &lt;div&gt;<b>&lcub;&lcub;p['desc']&rcub;&rcub;</b>&lt;/div&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            <b>&lcub;&percnt; endfor &percnt;&rcub;</b>
          </code>
          ...

     As a result of the above code, I will never have to write HTML to add 
     projects to the project page. Instead I create a json object for a project
     and jinja will create the HTML necessary to place the project onto the 
     page. 
     
     I have defined a "Project" in json to look like this:
     
          {
          'title': 'PROJECT TITLE', 
          'links': [{'url': 'LINK_1 URL', 'title': 'LINK_1 TITLE'}],
          'desc': 'PROJECT DESCRIPTION'
          }
          
     
     And the pythonic code to generate one looks like this:
     
          # Initialize a project object                                                      
          project_patweb = {'title': 'Patweb', 'links': [], 'desc': ''}
          
          # Insert links
          project_patweb['links'].append({'url': '/pos/patweb', 'title': 'project \
               outline'})
          project_patweb['links'].append({'url': 'https://github.com/patbcole117/PatWeb' \
               , 'title': 'github'})
          
          # Project descriptions are kept in a txt file and read into the json.
          f = open('app/templates/txt/descpatweb.txt', 'r')
          project_patweb['desc'] = f.read()
          
          #Lastly, the project is appended to a list and passed to jinja to 
          # generate HTML.
          project_list.append(project_patweb)
          
     This design allows me to only write in python, all the CSS and HTML are
     done automatically. Simply append a new project.json to the project list
     and jinja takes care of the rest.
     
Future Development
     I plan on adding some eastereggs to my website. There might already be some
     hidden around...
